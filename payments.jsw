import wixData from 'wix-data';
import wixStores from 'wix-stores-backend';
import wixUsers from 'wix-users-backend';
import {fetch} from 'wix-fetch';

export const apiKey = "ENTER_YOUR_API_KEY";
export const siteUrl = "ENTER_YOUR_SITE_URL_HERE";
export const cartMin = 1;

function getEnvironmentBaseUri() {
    let split = apiKey.split('_');
    let prefix = split[0];

    switch(prefix) {
        case 'sandbox':
            return 'https://merchant.api.sandbox.divido.com';
        case 'testing':
            return 'https://merchant-api-pub.api.testing.divido.net';
        case 'staging':
            return 'https://merchant-api-pub.api.staging.divido.net';
        case 'live':
        case 'production':
            return 'https://merchant.api.divido.com';
        default:
            return 'https://merchant.api.sandbox.divido.net';
    }
}

export async function checkCartPrice() {
    let cart = await wixStores.getCurrentCart();
    let total = cart.totals.total;
    const cartMax = 25000;
    if (await total < cartMin) {
        return false
    } else if (await total >= cartMax) {
        return false;
    } else {
        return true;
    }
}

export async function createApplication(application) {
    return await wixData.insert("applications", application, { "suppressAuth": true })
        .then((result) => {
            return result
        })
        .catch(error => error );
}

export async function getApplicationFromApi(applicationId) {
    let baseUri = getEnvironmentBaseUri();
    return fetch(baseUri+"/applications/" + applicationId, {
        "method": "get",
        "headers": {
            "x-divido-api-key": apiKey
        }
    })
        .then((httpResponse) => {
            if (httpResponse.ok) {
                return httpResponse.json();
            } else {
                return Promise.reject("Could not fetch application");
            }
        })
        .then(
            json => json.data
        )
        .catch(err => err)
}

export async function activateApplication(paymentId) {
    return await wixData.get('applications', paymentId)
        .then(application => {
            application.cart = JSON.parse(application.cart);
            let items = getItemsFromCart(application.cart);
            let orderItems = [];
            let iteration = 0;
            for (let item in items) {
                orderItems[iteration] = {
                    "name": item.name,
                    "quanity": item.quantity,
                    "price": parseFloat(item.price) * 100
                }
                iteration++;
            }
            let body = '{"amount":' + application.creditAmount + ', "order_items":' + JSON.stringify(items) + '}';

            let baseUri = getEnvironmentBaseUri();
            return fetch(baseUri+"/applications/" + application.applicationId + "/activations", {
                "method": "post",
                "headers": {
                    "x-divido-api-key": apiKey
                },
                "body": body
            })
                .then((httpResponse) => {
                    if (httpResponse.ok) {
                        return httpResponse.json();
                    } else {
                        return Promise.reject(httpResponse.json());
                    }
                })
                .then(
                    json => json.data
                )
                .catch(err => err);
        });
}


export async function cancelApplication(paymentId) {
    return await wixData.get('applications', paymentId)
        .then(application => {
            application.cart = JSON.parse(application.cart);
            let items = getItemsFromCart(application.cart);
            let orderItems = [];
            let iteration = 0;
            for (let item in items) {
                orderItems[iteration] = {
                    "name": item.name,
                    "quanity": item.quantity,
                    "price": parseFloat(item.price) * 100
                }
                iteration++;
            }
            let body = '{"amount":' + application.creditAmount + ', "order_items":' + JSON.stringify(items) + '}';
            let baseUri = getEnvironmentBaseUri();
            return fetch(baseUri+"/applications/" + application.applicationId + "/cancellations", {
                "method": "post",
                "headers": {
                    "x-divido-api-key": apiKey
                },
                "body": body
            })
                .then((httpResponse) => {
                    if (httpResponse.ok) {
                        return httpResponse.json();
                    } else {
                        return Promise.reject(httpResponse.json());
                    }
                })
                .then(
                    json => json.data
                )
                .catch(err => err);
        });
}



export async function generateCartPayload() {
    return wixStores.getCurrentCart()
        .then((cart) => {
            let user = wixUsers.currentUser;
            let application = {
                "paymentId": cart._id,
                "cart": cart,
                "userId": user.id
            };
            return createApplication(application)
                .then(result => {
                    let items = getItemsFromCart(cart);
                    return {
                        apiKey: apiKey,
                        items: items,
                        currency: cart.currency.code,
                        total: (cart.totals.total) * 100,
                        paymentId: result._id,
                        url: siteUrl
                    }
                })
                .catch(error => Promise.reject(error));
        })
        .catch(error => Promise.reject(error));
}

function getItemsFromCart(cart) {
    let items = [];
    let iteration = 0;
    for (let item of cart.lineItems) {
        let name = item.name;
        for (let opt of item.options) {
            name = name + ' - ' + opt.option + ': ' + opt.selection;
        }
        items[iteration] = {
            id: item.productId,
            name: name,
            quantity: item.quantity,
            price: item.price
        }
        iteration++;
    }
    if (cart.totals.shipping > 0) {
        items[iteration] = {
            name: 'Shipping',
            price: cart.totals.shipping,
            quantity: 1
        }
        iteration++;
    }
    if (cart.totals.discount > 0) {
        items[iteration] = {
            name: 'Coupon - ' + cart.appliedCoupon.name,
            price: 0 - cart.totals.discount,
            quantity: 1
        }
    }
    return items;
}

export async function getUserApplications() {
    let user = wixUsers.currentUser;

    return await wixData.query('applications')
        .eq("userId", user.id)
        .isNotEmpty("applicationId")
        .find({ "suppressAuth": true })
        .then(result => {
            let applications = [];
            let iteration = 0;
            for (let application of result.items) {
                let itemsStr = "";
                let items = getItemsFromCart(application.cart);
                for (let item of items) {
                    itemsStr += item.quantity + " x " + item.name + " - " + application.cart.currency.symbol +  item.price + "\n";
                }
                applications[iteration] = application;
                applications[iteration].itemsStr = itemsStr;
                iteration++;
            }
            return applications;
        })
        .catch(error => Promise.reject(error))
}

export async function getAllApplications() {
    return await wixData.query('applications')
        .isNotEmpty("applicationId")
        .find()
        .then(result => {
            let applications = [];
            let iteration = 0;
            for (let application of result.items) {
                let itemsStr = "";
                let items = getItemsFromCart(application.cart);
                for (let item of items) {
                    itemsStr += item.quantity + " x " + item.name + " - " + application.cart.currency.symbol + item.price + "\n";
                }
                applications[iteration] = application;
                applications[iteration].itemsStr = itemsStr;
                iteration++;
            }
            return applications;
        })
        .catch(error => Promise.reject(error))
}


export async function getApplication(id) {
    return await wixData.get('applications', id, { "suppressAuth": true })
        .then(application => {
            const toUpdate = Object.assign({}, application);
            let index = 0;
            for (let item of application.cart.lineItems) {
                let itemOptions = "";
                for (let opt of item.options) {
                    itemOptions = itemOptions + opt.option + ': ' + opt.selection + '\n';
                }
                application.cart.lineItems[index].optionsStr = itemOptions;
                application.cart.lineItems[index]._id = (index + 1).toString();
                application.cart.lineItems[index].priceStr = application.cart.currency.symbol + parseInt(item.price).toFixed(2)
                index++;
            }
            application.totalStr = application.cart.currency.symbol + parseInt(application.cart.totals.total).toFixed(2)
            if (typeof application.address === 'undefined' || application.address === '') {
                return getApplicationFromApi(application.applicationId)
                    .then(apiApp => {
                        let address = apiApp.applicants[0].addresses[0];
                        application.addressStr = addressToString(address);

                        toUpdate.address = address;
                        wixData.update("applications", toUpdate)
                            .then((results) => {
                                let item = results; //see item below
                            })
                            .catch((err) => {
                                let errorMsg = err;
                            });
                        return application
                    })
                    .catch(error => error);
            } else {
                application.addressStr = addressToString(application.address);
                return application;
            }
        })
        .catch(error => Promise.reject(error))
}

function addressToString(addressObj) {
    let addressStr = "";
    if (addressObj.co !== null && addressObj.co !== '') {
        addressStr += addressObj.co + "\n";
    }

    if (addressObj.buildingName !== null && addressObj.buildingName !== '') {
        addressStr += addressObj.buildingName + "\n";
    }

    if (addressObj.flat !== null && addressObj.flat !== '') {
        addressStr += "Flat " + addressObj.flat + "\n";
    }

    if (addressObj.street !== null && addressObj.street !== '') {
        addressStr += addressObj.street + "\n";
    }

    if (addressObj.town !== null && addressObj.town !== '') {
        addressStr += addressObj.town + "\n";
    }

    if (addressObj.district !== null && addressObj.district !== '') {
        addressStr += addressObj.district + "\n";
    }

    if (addressObj.postcode !== null && addressObj.postcode !== '') {
        addressStr += addressObj.postcode + "\n";
    }
    return addressStr;
}

export async function confirmApplication(proposalId) {
    let cart = await wixStores.getCurrentCart();
    let applicationId = cart._id;

    let proposal = await getApplicationFromApi(proposalId);

    return wixData.query('applications')
        .eq('paymentId', applicationId)
        .eq('_id', proposal.metadata.payment_id)
        .find({ "suppressAuth": true })
        .then((result) => {
            if (result.items.length > 0) {
                return proposal;
            } else return Promise.reject("Could not verify application");
        })
        .catch((error) => {
            return Promise.reject(error);
        })
}